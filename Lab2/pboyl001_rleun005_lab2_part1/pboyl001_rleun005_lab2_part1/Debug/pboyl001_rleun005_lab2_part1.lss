
pboyl001_rleun005_lab2_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000998  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003a6  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d5  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b5  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f3  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000128f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 81 00 	call	0x102	; 0x102 <main>
  c8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <GetBit>:
 */ 


#include <avr/io.h>

unsigned char GetBit(unsigned char x, unsigned char k) {
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	00 d0       	rcall	.+0      	; 0xd6 <GetBit+0x6>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	89 83       	std	Y+1, r24	; 0x01
  dc:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	88 2f       	mov	r24, r24
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	2a 81       	ldd	r18, Y+2	; 0x02
  e6:	22 2f       	mov	r18, r18
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 2e       	mov	r0, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <GetBit+0x22>
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <GetBit+0x1e>
  f6:	81 70       	andi	r24, 0x01	; 1
}
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <main>:

void main()
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <main+0x6>
 108:	00 d0       	rcall	.+0      	; 0x10a <main+0x8>
 10a:	0f 92       	push	r0
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs, initialize to 1s
 110:	81 e2       	ldi	r24, 0x21	; 33
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	10 82       	st	Z, r1
 118:	82 e2       	ldi	r24, 0x22	; 34
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	DDRB = 0x00; PORTB = 0xFF; // Configure port B's 8 pins as outputs, initialize to 0s
 122:	84 e2       	ldi	r24, 0x24	; 36
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	10 82       	st	Z, r1
 12a:	85 e2       	ldi	r24, 0x25	; 37
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 134:	87 e2       	ldi	r24, 0x27	; 39
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	fc 01       	movw	r30, r24
 144:	10 82       	st	Z, r1
	unsigned char cnt;
	while (1) {
		unsigned char mask = 0x01;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char button = PINA & mask;
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	90 81       	ld	r25, Z
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	89 23       	and	r24, r25
 156:	8b 83       	std	Y+3, r24	; 0x03
		unsigned char button2 = PINB & mask;
 158:	83 e2       	ldi	r24, 0x23	; 35
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	90 81       	ld	r25, Z
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	89 23       	and	r24, r25
 164:	8c 83       	std	Y+4, r24	; 0x04
		cnt=0;
 166:	19 82       	std	Y+1, r1	; 0x01
		for (unsigned char i =0; i<8; i++) {
 168:	1d 82       	std	Y+5, r1	; 0x05
 16a:	26 c0       	rjmp	.+76     	; 0x1b8 <main+0xb6>
			if (GetBit(button, i)) {
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	6d 81       	ldd	r22, Y+5	; 0x05
 170:	0e 94 68 00 	call	0xd0	; 0xd0 <GetBit>
 174:	88 23       	and	r24, r24
 176:	19 f0       	breq	.+6      	; 0x17e <main+0x7c>
				cnt++;
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	89 83       	std	Y+1, r24	; 0x01
				
			}
			if (GetBit(button2, i)) {
 17e:	8c 81       	ldd	r24, Y+4	; 0x04
 180:	6d 81       	ldd	r22, Y+5	; 0x05
 182:	0e 94 68 00 	call	0xd0	; 0xd0 <GetBit>
 186:	88 23       	and	r24, r24
 188:	19 f0       	breq	.+6      	; 0x190 <main+0x8e>
				cnt++;
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	89 83       	std	Y+1, r24	; 0x01
			}
			mask = mask << 1;
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	88 0f       	add	r24, r24
 194:	8a 83       	std	Y+2, r24	; 0x02
			button = PINA & mask;
 196:	80 e2       	ldi	r24, 0x20	; 32
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	90 81       	ld	r25, Z
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	89 23       	and	r24, r25
 1a2:	8b 83       	std	Y+3, r24	; 0x03
			button2 = PINB & mask;
 1a4:	83 e2       	ldi	r24, 0x23	; 35
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	fc 01       	movw	r30, r24
 1aa:	90 81       	ld	r25, Z
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	89 23       	and	r24, r25
 1b0:	8c 83       	std	Y+4, r24	; 0x04
	while (1) {
		unsigned char mask = 0x01;
		unsigned char button = PINA & mask;
		unsigned char button2 = PINB & mask;
		cnt=0;
		for (unsigned char i =0; i<8; i++) {
 1b2:	8d 81       	ldd	r24, Y+5	; 0x05
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	8d 83       	std	Y+5, r24	; 0x05
 1b8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	b8 f2       	brcs	.-82     	; 0x16c <main+0x6a>
			}
			mask = mask << 1;
			button = PINA & mask;
			button2 = PINB & mask;
		}
		PORTC = cnt;
 1be:	88 e2       	ldi	r24, 0x28	; 40
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	29 81       	ldd	r18, Y+1	; 0x01
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
	}
 1c8:	be cf       	rjmp	.-132    	; 0x146 <main+0x44>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
