
pboyl001_rleun005_lab2_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000012c  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000341  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a2  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e4  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
		unsigned char tempA = PINA;
		unsigned char tempC = PINC;
		PORTC = 0;
		if((tempA > 12))
		{
			PORTC = 0x3F;
  d0:	2f e3       	ldi	r18, 0x3F	; 63
		{
			PORTC = 0x60;
		}
		else
		{
			PORTC = 0x40;
  d2:	70 e4       	ldi	r23, 0x40	; 64
		{
			PORTC = 0x70;
		}
		else if((tempA > 0))
		{
			PORTC = 0x60;
  d4:	60 e6       	ldi	r22, 0x60	; 96
		{
			PORTC = 0x38;
		}
		else if((tempA > 2) && (tempA < 5))
		{
			PORTC = 0x70;
  d6:	e0 e7       	ldi	r30, 0x70	; 112
		{
			PORTC = 0x3C;
		}	  			
		else if((tempA > 4) && (tempA < 7))
		{
			PORTC = 0x38;
  d8:	58 e3       	ldi	r21, 0x38	; 56
		{
			PORTC = 0x3E;
		}		
		else if((tempA > 6) && (tempA < 10))
		{
			PORTC = 0x3C;
  da:	4c e3       	ldi	r20, 0x3C	; 60
		{
			PORTC = 0x3F;
		}
		else if((tempA > 9) && (tempA < 13))
		{
			PORTC = 0x3E;
  dc:	3e e3       	ldi	r19, 0x3E	; 62

int main(void)
{
    while(1)
    {
		unsigned char tempA = PINA;
  de:	80 b1       	in	r24, 0x00	; 0
		unsigned char tempC = PINC;
  e0:	96 b1       	in	r25, 0x06	; 6
		PORTC = 0;
  e2:	18 b8       	out	0x08, r1	; 8
		if((tempA > 12))
  e4:	8d 30       	cpi	r24, 0x0D	; 13
  e6:	10 f0       	brcs	.+4      	; 0xec <main+0x1c>
		{
			PORTC = 0x3F;
  e8:	28 b9       	out	0x08, r18	; 8
  ea:	f9 cf       	rjmp	.-14     	; 0xde <main+0xe>
		}
		else if((tempA > 9) && (tempA < 13))
  ec:	98 2f       	mov	r25, r24
  ee:	9a 50       	subi	r25, 0x0A	; 10
  f0:	93 30       	cpi	r25, 0x03	; 3
  f2:	10 f4       	brcc	.+4      	; 0xf8 <main+0x28>
		{
			PORTC = 0x3E;
  f4:	38 b9       	out	0x08, r19	; 8
  f6:	f3 cf       	rjmp	.-26     	; 0xde <main+0xe>
		}		
		else if((tempA > 6) && (tempA < 10))
  f8:	98 2f       	mov	r25, r24
  fa:	97 50       	subi	r25, 0x07	; 7
  fc:	93 30       	cpi	r25, 0x03	; 3
  fe:	10 f4       	brcc	.+4      	; 0x104 <main+0x34>
		{
			PORTC = 0x3C;
 100:	48 b9       	out	0x08, r20	; 8
 102:	ed cf       	rjmp	.-38     	; 0xde <main+0xe>
		}	  			
		else if((tempA > 4) && (tempA < 7))
 104:	98 2f       	mov	r25, r24
 106:	95 50       	subi	r25, 0x05	; 5
 108:	92 30       	cpi	r25, 0x02	; 2
 10a:	10 f4       	brcc	.+4      	; 0x110 <main+0x40>
		{
			PORTC = 0x38;
 10c:	58 b9       	out	0x08, r21	; 8
 10e:	e7 cf       	rjmp	.-50     	; 0xde <main+0xe>
		}
		else if((tempA > 2) && (tempA < 5))
 110:	98 2f       	mov	r25, r24
 112:	93 50       	subi	r25, 0x03	; 3
 114:	92 30       	cpi	r25, 0x02	; 2
 116:	10 f4       	brcc	.+4      	; 0x11c <main+0x4c>
		{
			PORTC = 0x70;
 118:	e8 b9       	out	0x08, r30	; 8
 11a:	e1 cf       	rjmp	.-62     	; 0xde <main+0xe>
		}
		else if((tempA > 0))
 11c:	88 23       	and	r24, r24
 11e:	11 f0       	breq	.+4      	; 0x124 <main+0x54>
		{
			PORTC = 0x60;
 120:	68 b9       	out	0x08, r22	; 8
 122:	dd cf       	rjmp	.-70     	; 0xde <main+0xe>
		}
		else
		{
			PORTC = 0x40;
 124:	78 b9       	out	0x08, r23	; 8
 126:	db cf       	rjmp	.-74     	; 0xde <main+0xe>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
