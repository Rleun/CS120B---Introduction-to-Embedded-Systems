
pboyl001_rleun005_lab2_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000930  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c1  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fe  00000000  00000000  00000d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  00000e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f7  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014f  00000000  00000000  00001253  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  c8:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <GetBit>:


#include <avr/io.h>

unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <GetBit+0x8>
  d4:	95 95       	asr	r25
  d6:	87 95       	ror	r24
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <GetBit+0x4>
}
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	08 95       	ret

000000e0 <main>:
			{
				tempC = 0x38;
			}
			else if((tempA > 2) && (tempA < 5))
			{
				tempC = 0x70;
  e0:	10 e7       	ldi	r17, 0x70	; 112
			}
			else if((tempA > 0))
			{
				tempC = 0x60;
  e2:	d0 e6       	ldi	r29, 0x60	; 96

int main(void)
{
    while(1)
    {
		unsigned char tempA = PINA;
  e4:	c0 b1       	in	r28, 0x00	; 0
		unsigned char tempC = 0;
		unsigned char mask = 0x10;
		unsigned char button = PINA & mask;
  e6:	80 b1       	in	r24, 0x00	; 0
		PORTC = 0;
  e8:	18 b8       	out	0x08, r1	; 8
		if(GetBit(button,4))
  ea:	80 71       	andi	r24, 0x10	; 16
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	0e 94 68 00 	call	0xd0	; 0xd0 <GetBit>
  f2:	88 23       	and	r24, r24
  f4:	b9 f3       	breq	.-18     	; 0xe4 <main+0x4>
		{
			unsigned char t1 = 0x0F;
			tempA = tempA & t1; 
  f6:	cf 70       	andi	r28, 0x0F	; 15
			if((tempA > 12))
  f8:	cd 30       	cpi	r28, 0x0D	; 13
  fa:	88 f4       	brcc	.+34     	; 0x11e <main+0x3e>
			{
				tempC = 0x3F;
			}
			else if((tempA > 9) && (tempA < 13))
  fc:	8c 2f       	mov	r24, r28
  fe:	8a 50       	subi	r24, 0x0A	; 10
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	78 f0       	brcs	.+30     	; 0x122 <main+0x42>
			{
				tempC = 0x3E;
			}
			else if((tempA > 6) && (tempA < 10))
 104:	8d 5f       	subi	r24, 0xFD	; 253
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	70 f0       	brcs	.+28     	; 0x126 <main+0x46>
			{
				tempC = 0x3C;
			}
			else if((tempA > 4) && (tempA < 7))
 10a:	8e 5f       	subi	r24, 0xFE	; 254
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	68 f0       	brcs	.+26     	; 0x12a <main+0x4a>
			{
				tempC = 0x38;
			}
			else if((tempA > 2) && (tempA < 5))
 110:	8e 5f       	subi	r24, 0xFE	; 254
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	60 f0       	brcs	.+24     	; 0x12e <main+0x4e>
			{
				tempC = 0x70;
			}
			else if((tempA > 0))
 116:	cc 23       	and	r28, r28
 118:	61 f0       	breq	.+24     	; 0x132 <main+0x52>
			{
				tempC = 0x60;
 11a:	cd 2f       	mov	r28, r29
 11c:	0b c0       	rjmp	.+22     	; 0x134 <main+0x54>
		{
			unsigned char t1 = 0x0F;
			tempA = tempA & t1; 
			if((tempA > 12))
			{
				tempC = 0x3F;
 11e:	cf e3       	ldi	r28, 0x3F	; 63
 120:	09 c0       	rjmp	.+18     	; 0x134 <main+0x54>
			}
			else if((tempA > 9) && (tempA < 13))
			{
				tempC = 0x3E;
 122:	ce e3       	ldi	r28, 0x3E	; 62
 124:	07 c0       	rjmp	.+14     	; 0x134 <main+0x54>
			}
			else if((tempA > 6) && (tempA < 10))
			{
				tempC = 0x3C;
 126:	cc e3       	ldi	r28, 0x3C	; 60
 128:	05 c0       	rjmp	.+10     	; 0x134 <main+0x54>
			}
			else if((tempA > 4) && (tempA < 7))
			{
				tempC = 0x38;
 12a:	c8 e3       	ldi	r28, 0x38	; 56
 12c:	03 c0       	rjmp	.+6      	; 0x134 <main+0x54>
			}
			else if((tempA > 2) && (tempA < 5))
			{
				tempC = 0x70;
 12e:	c1 2f       	mov	r28, r17
 130:	01 c0       	rjmp	.+2      	; 0x134 <main+0x54>
			{
				tempC = 0x60;
			}
			else
			{
				tempC = 0x40;
 132:	c0 e4       	ldi	r28, 0x40	; 64
			}
			mask = mask << 1;
			button = PINA & mask;
 134:	80 b1       	in	r24, 0x00	; 0
			//tempC = PINC;
			if(GetBit(button,5))
 136:	80 72       	andi	r24, 0x20	; 32
 138:	65 e0       	ldi	r22, 0x05	; 5
 13a:	0e 94 68 00 	call	0xd0	; 0xd0 <GetBit>
 13e:	88 23       	and	r24, r24
 140:	61 f0       	breq	.+24     	; 0x15a <main+0x7a>
			{
				mask = mask << 1;
				button = PINA & mask;
 142:	80 b1       	in	r24, 0x00	; 0
				if(!GetBit(button,6))
 144:	80 74       	andi	r24, 0x40	; 64
 146:	66 e0       	ldi	r22, 0x06	; 6
 148:	0e 94 68 00 	call	0xd0	; 0xd0 <GetBit>
 14c:	88 23       	and	r24, r24
 14e:	19 f4       	brne	.+6      	; 0x156 <main+0x76>
				{
					unsigned char t = 0x80;
					PORTC = tempC | t;	
 150:	c0 68       	ori	r28, 0x80	; 128
 152:	c8 b9       	out	0x08, r28	; 8
 154:	c7 cf       	rjmp	.-114    	; 0xe4 <main+0x4>
				}
				else
				{
					PORTC = tempC;
 156:	c8 b9       	out	0x08, r28	; 8
 158:	c5 cf       	rjmp	.-118    	; 0xe4 <main+0x4>
				}
			}
			else
			{
				PORTC = tempC;
 15a:	c8 b9       	out	0x08, r28	; 8
 15c:	c3 cf       	rjmp	.-122    	; 0xe4 <main+0x4>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
