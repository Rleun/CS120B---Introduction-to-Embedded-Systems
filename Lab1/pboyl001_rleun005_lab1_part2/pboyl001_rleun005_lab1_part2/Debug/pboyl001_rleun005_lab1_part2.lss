
pboyl001_rleun005_lab1_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000104  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000345  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a2  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e6  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:

#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  d0:	11 b8       	out	0x01, r1	; 1
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs,
  d6:	84 b9       	out	0x04, r24	; 4
  d8:	15 b8       	out	0x05, r1	; 5
    {
		unsigned char mask = 0x01;
		cntavail = 4;
		if(PINA & mask)
		{
			cntavail--;
  da:	33 e0       	ldi	r19, 0x03	; 3
    unsigned char cntavail = 0;
	
    while(1)
    {
		unsigned char mask = 0x01;
		cntavail = 4;
  dc:	24 e0       	ldi	r18, 0x04	; 4
		if(PINA & mask)
  de:	80 b1       	in	r24, 0x00	; 0
  e0:	80 fd       	sbrc	r24, 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x18>
    unsigned char cntavail = 0;
	
    while(1)
    {
		unsigned char mask = 0x01;
		cntavail = 4;
  e4:	82 2f       	mov	r24, r18
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x1a>
		if(PINA & mask)
		{
			cntavail--;
  e8:	83 2f       	mov	r24, r19
		}
		mask = mask << 1;
		if(PINA & mask)
  ea:	90 b1       	in	r25, 0x00	; 0
  ec:	91 fd       	sbrc	r25, 1
		{
			cntavail--;
  ee:	81 50       	subi	r24, 0x01	; 1
		}		
		mask = mask << 1;
		if(PINA & mask)
  f0:	90 b1       	in	r25, 0x00	; 0
  f2:	92 fd       	sbrc	r25, 2
		{
			cntavail--;
  f4:	81 50       	subi	r24, 0x01	; 1
		}	
		mask = mask << 1;
		if(PINA & mask)
  f6:	90 b1       	in	r25, 0x00	; 0
  f8:	93 fd       	sbrc	r25, 3
		{
			cntavail--;
  fa:	81 50       	subi	r24, 0x01	; 1
		}											
						
        PORTC = cntavail;	    
  fc:	88 b9       	out	0x08, r24	; 8
    }
  fe:	ef cf       	rjmp	.-34     	; 0xde <main+0xe>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
